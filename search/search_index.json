{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>"},{"location":"#industrial-informatics","title":"Industrial Informatics","text":"<p>Course material for the second part and Lab sesions of the Industrial Informatics course at The University of M\u00e1laga. </p> <p>By Juan M. Gandarias  Systems Engineering and Automation Department</p> <p>Find out more...</p> <p></p>"},{"location":"about/","title":"Welcome","text":""},{"location":"about/#welcome","title":"Welcome","text":"<p>This is the home of the Industrial Informatics course: A fourth-year undergraduate course for Electronics Engineering students in the School of Industrial Engineering at The University of M\u00e1laga. The lab course is developed by Dr Juan M. Gandarias, an Assistant Professor in the Systems Engineering and Automation Department.</p>"},{"location":"about/acknowledgements/","title":"Acknowledgements","text":"<p>The delivery of these materials following this format has been inspired by the work done by Dr. Tom Howard in the COM2009-3009 Robotics Course at The University of Sheffield. In addition, the content presented has been inspired by various sources listed below.</p>"},{"location":"about/acknowledgements/#mqtt","title":"MQTT","text":"<ul> <li>Luis LLamas Tutorials.</li> <li>R. Buyya y A. V. Dastjerdi, Internet of Things: Principles and paradigms. Elsevier, 2016.</li> <li>K. Ashton et al., \u201cThat \u2018internet of things\u2019 thing,\u201d RFID journal, vol. 22, n.o 7, p\u00e1gs. 97-114, 2009.</li> <li>Fremantle et al., \u201cA reference architecture for the internet of things,\u201d WSO2 White paper, p\u00e1gs. 02-04, 2015.</li> <li>Y. Zhang y F. Tao, Optimization of manufacturing systems using the Internet of Things. Academic Press, 2016.</li> <li>M. Schwartz, Internet of Things with ESP8266. Packt Publishing Ltd, 2016.</li> <li>T. Pulver, Hands-On Internet of Things with MQTT: Build connected IoT devices with Arduino and MQ Telemetry Transport (MQTT). Packt Publishing Ltd, 2019.</li> <li>L. R. Kanagachidambaresan, Internet of Things Using Single Board Computers: Principles of IoT and Python Programming. Springer, 2022.</li> </ul>"},{"location":"about/changelog/","title":"Version History","text":""},{"location":"about/changelog/#iteration-1","title":"Iteration 1","text":"<p>Academic Year: 2024-2025</p> <ul> <li>Initial release of the material.</li> <li>Included MQTT material only (for now...).</li> </ul>"},{"location":"about/license/","title":"License","text":"<p> This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. </p> <p>You are free to distribute, remix, adapt, and build upon this work (for non-commercial purposes only) as long as credit is given to the original author.</p> <p>For more information, check this link.</p>"},{"location":"mqtt/","title":"MQTT","text":"<ul> <li> <p>Getting Started: \"A hands-on introduction to MQTT\".</p> <p>Here you will start working with MQTT.</p> </li> <li> <p>Exercise #1:: \"MQTT with ESP32 in wokwi\".</p> <p>TBD</p> </li> <li> <p>Lab Session:: \"MQTT with M5Core2\".</p> <p>TBD</p> </li> </ul>"},{"location":"mqtt/exercise1/","title":"Exercise #1: MQTT with ESP32 in wokwi","text":"<p>TBD</p>"},{"location":"mqtt/getting_started/","title":"Getting Started: A hands-on introduction to MQTT","text":""},{"location":"mqtt/getting_started/#overview","title":"Overview","text":"<p>TBD</p>"},{"location":"mqtt/getting_started/#the-course","title":"The Course","text":"<ul> <li>Part 1: Install Mosquitto</li> <li>Part 2: Testing Mosquitto from the terminal</li> <li>Part 3: Allow External Connections</li> </ul>"},{"location":"mqtt/getting_started/part1_install_mosquitto/","title":"Part 1: Install Mosquitto","text":""},{"location":"mqtt/getting_started/part1_install_mosquitto/#introduction","title":"Introduction","text":"<p>Eclipse Mosquitto is an Open Source Broker from the Eclipse Foundation distributed under EPL/EDL license that implements MQTT protocol. It is lightweight and is suitable for use on all devices from low power single board computers to full servers. It is programmed in C and is compatible with most OS. The code can be found in this repo.</p>"},{"location":"mqtt/getting_started/part1_install_mosquitto/#installation","title":"Installation","text":"<p>To install Mosquitto, you can follow the next steps.</p> <p>Info</p> <p>\"The steps below outline the Mosquitto installation process for Windows. If you are using Ubuntu, the installation process is much easier. You can find the steps for Ubuntu installation here. </p> <ol> <li>Download the installer from the official website. Check the corresponding type of your processor architecture (most probably 64-bit). Once you have the <code>.exe</code>, execute it to start the installation process.</li> <li>During the installation, install all the components.</li> </ol> <p></p> <ol> <li>When the installer asks you for the Destination Folder, leave the default one (most probably: <code>C:\\Program Files\\mosquitto</code>).</li> </ol> <p></p>"},{"location":"mqtt/getting_started/part1_install_mosquitto/#start-mosquitto","title":"Start Mosquitto","text":"<p>Now, you can start mosquitto through windows services. You can open the services by clicking the Win button and typing <code>Services</code>.  Here you can check the multiple ways to open windows services.</p> <p></p> <p>Once you have find the mosquito broker service, you can click on Start the service to start and enable the port where the mosquito will start listening for requests.</p> <p></p> <p>Info</p> <p>It may happen that when you open the windows services, mosquitto is already running.</p> <p>You can check in the terminal (Win <code>cmd</code>) if the service is active and the port enabled with the following command.</p> <pre><code>netstat -an\n</code></pre> <p></p> <p>Then you will see a list of enabling ports. Port 1883 is the one used by mosquitto for communication.</p> <p></p>"},{"location":"mqtt/getting_started/part1_install_mosquitto/#firewall","title":"Firewall","text":"<p>As mosquitto requires external communication, it is necessary to enable the windows firewall for incoming and outgoing requests on port 1883 (this way, the firewall does not block the mosquitto service).</p> <p>You need to go to <code>Control panel &gt; Windows defender firewall</code>. Then, go yo <code>advanced setting</code>.</p> <p></p> <p></p> <p>It will open the Advanced Configuration of Firewall window where you have to look for inbound rules and click on new rule.</p> <ol> <li>The first step is to select the type of rule. In this case it is a port, so select it and click on next.</li> <li>Then, you select the rule for <code>tcp</code> and we write the corresponding port: <code>1883</code>. Click on <code>next</code> and allow all the connections.</li> <li>Apply the rule to all the network profiles and place a name to identify it. Click on finish and the rule will be created.</li> </ol> <p>Now you can create the outbound rule. Click on outbound rule and do the same steps you did before.</p>"},{"location":"mqtt/getting_started/part1_install_mosquitto/#path-environment-variable","title":"Path Environment Variable","text":"<p>Once you have Mosquitto running as a service and the firewall is correctly configured, you need to configure the environment variable.</p> <p>Info</p> <p>This is not strictly required but highly recommended. If you don't do this, you can only run Mosquitto commands in the terminal from the root installation folder <code>C:\\Program Files\\mosquitto</code>. If you add this folder to the Path, then you'll be able to run those commands from any location on your system. </p> <p>You need to acced the <code>environment variables</code> and search for the variable path to place the route <code>Control Panel &gt; System and security &gt; System</code>. </p> <p></p> <p>Then, open the advanced system configuration and click on <code>environment variables</code>.</p> <p></p> <p>Include the path where mosquitto was installed (remember step 3 of installation<code>C:\\Program Files\\mosquitto</code>). </p> <p></p>"},{"location":"mqtt/getting_started/part2_testing_mosquitto_terminal/","title":"Part 2: Testing Mosquitto from the terminal","text":""},{"location":"mqtt/getting_started/part2_testing_mosquitto_terminal/#testing","title":"Testing","text":"<p>If you have already completed Part 1, now you can test mosquitto broker in your local machine. Open one terminal (Win + <code>cmd</code>) and go to the route where mosquitto was installed</p> <pre><code>cd C:\\Program Files\\mosquitto\n</code></pre> <p>Info</p> <p>If you have already configured the variable path in Part 1, the previous step should not be necessary.</p>"},{"location":"mqtt/getting_started/part2_testing_mosquitto_terminal/#creating-a-subscriber","title":"Creating a subscriber","text":"<p>This terminal will act as a subscriber and will receive the messages published in the topic <code>/test</code>. To do so, run the following command</p> <pre><code>mosquitto_sub -h localhost -t /test\n</code></pre> <ol> <li> <p><code>mosquitto_sub</code> </p> <ul> <li>This is the Mosquitto client tool used to subscribe to an MQTT topic.</li> <li>It listens for messages published to specific topics.</li> </ul> </li> <li> <p><code>-h localhost</code> </p> <ul> <li><code>-h</code> specifies the host or broker address to connect to.</li> <li><code>localhost</code> means the broker is running on the same machine where the command is being executed. If the broker is on a remote server, you'd need to replace    <code>localhost</code> with the server's IP address or domain name.</li> </ul> </li> <li> <p><code>-t /test</code> </p> <ul> <li><code>-t</code> specifies the topic to subscribe to.</li> <li><code>/test</code> is the topic name in this example. Topics are hierarchical strings used by MQTT brokers to route messages. In this case, the client will subscribe to the <code>/test</code> topic and receive any messages published to it.</li> </ul> </li> </ol>"},{"location":"mqtt/getting_started/part2_testing_mosquitto_terminal/#explanation","title":"Explanation:","text":"<p>The command subscribes to the MQTT topic <code>/test</code> on a broker running locally (at <code>localhost</code>). Messages sent to the <code>/test</code> topic by other MQTT clients or publishers will be received and displayed by this subscriber.</p>"},{"location":"mqtt/getting_started/part2_testing_mosquitto_terminal/#creating-a-publisher","title":"Creating a publisher","text":"<p>Without closing that terminal, open another one (Win + <code>cmd</code>). This second terminal will act as a publisher that will publish the message This is a testing message: Hello, MQTT! in the topic <code>/test</code>. This message will be received by the subscriber and will display it in the terminal</p> <pre><code>mosquitto_pub -h localhost -t /test -m \"This is a testing message: Hello, MQTT!\"\n</code></pre> <ol> <li> <p><code>mosquitto_pub</code> </p> <ul> <li>This is the Mosquitto client tool used to publish messages to an MQTT topic.</li> <li>It sends messages to the specified topic on the broker.</li> </ul> </li> <li> <p><code>-h localhost</code> </p> <ul> <li><code>-h</code> specifies the host or broker address to connect to.</li> <li><code>localhost</code> means the broker is running on the same machine where the command is being executed. If the broker is on a remote server, you'd replace <code>localhost</code> with the server's IP address or domain name.</li> </ul> </li> <li> <p><code>-t test</code> </p> <ul> <li><code>-t</code> specifies the topic to which the message will be published.</li> <li><code>test</code> is the topic name in this example. Other MQTT clients subscribed to this topic will receive the message.</li> </ul> </li> <li> <p><code>-m \"This is a testing message: Hello, MQTT!\"</code> </p> <ul> <li><code>-m</code> specifies the message to publish.</li> <li><code>\"This is a testing message: Hello, MQTT!\"</code> is the message content being sent to the <code>test</code> topic. Clients subscribed to the topic will see this exact message.</li> </ul> </li> </ol>"},{"location":"mqtt/getting_started/part2_testing_mosquitto_terminal/#explanation_1","title":"Explanation:","text":"<p>The command publishes the message <code>\"This is a testing message: Hello, MQTT!\"</code> to the MQTT topic <code>test</code> on a broker running locally (at <code>localhost</code>). Any MQTT clients subscribed to the <code>test</code> topic will receive this message.</p>"},{"location":"mqtt/getting_started/part2_testing_mosquitto_terminal/#expected-result","title":"Expected result","text":"<p>If you have correctly done all the steps, you should have seen the following:</p> <p></p> <p>Note</p> <p>The subscriber will keep running indefinitely, waiting for messages. On the other hand, the publisher runs only once to send a single message. If you want to send more messages, you will need to re-run the entire command each time</p>"},{"location":"mqtt/getting_started/part3_external_connections/","title":"Part 3: Allow External Connections","text":"<p>Connection from an external network</p> <p>This section allows you to connect external devices within a local network to the broker that you have created in Part1. When this section talks about IP address, it refers to the private IP address (i.e., the one assigned by the router that creates the network and that is only accessible by the devices that are on the network). If you want to work with devices outside the network, you need to work with the public IP address (which is unique and visible to everyone). If you would like to configure a broker to allow connections through the internet from external networks, you would have to configure port forwarding on the router (similarly to what you did in Part1 with the windows firewall). This could pose several security risks and would require taking precautions such as using TLS/SSL Encryption or a MQTT Proxy. This is outside the scope of this course, so it will not be explained here.</p>"},{"location":"mqtt/getting_started/part3_external_connections/#1-allow-external-connections","title":"1. Allow External Connections","text":"<p>By default, Mosquitto listens only on <code>localhost</code>. To allow external connections:</p> <ol> <li> <p>Open the Mosquitto configuration file (<code>mosquitto.conf</code>). The file is typically located in:</p> <ul> <li>Linux: <code>/etc/mosquitto/mosquitto.conf</code></li> <li>Windows: Wherever you installed Mosquitto, e.g., <code>C:\\Program Files\\mosquitto\\mosquitto.conf</code></li> </ul> </li> <li> <p>Add or edit the following line to bind Mosquitto to all network interfaces:     <pre><code>listener 1883\n</code></pre></p> <p></p> <ul> <li><code>1883</code> is the default MQTT port. If you want a custom port, specify it here.</li> <li>To restrict it to a specific IP, replace <code>listener 1883</code> with <code>listener 1883 &lt;IP Address&gt;</code>.</li> </ul> </li> <li> <p>Restart the Mosquitto service for changes to take effect:</p> <ul> <li>Linux:     <pre><code>sudo systemctl restart mosquitto\n</code></pre></li> <li>Windows: Restart Mosquitto from the Windows Services </li> </ul> </li> </ol> <p>Warning</p> <p>To edit a file inside <code>C:\\Program Files\\mosquitto\\</code>, you'll need administrator rights. To change the <code>mosquitto.conf</code>file, you can open it with VSCode (or any other text editor, e.g., notepad or gedit) if you open it as administrator.</p> <p></p>"},{"location":"mqtt/getting_started/part3_external_connections/#2-enable-username-and-password-authentication","title":"2. Enable Username and Password Authentication","text":"<ol> <li> <p>Create a password file:  </p> <ul> <li> <p>Linux:</p> <p>Use the <code>mosquitto_passwd</code> utility to generate the password file: <pre><code>mosquitto_passwd -c /etc/mosquitto/password &lt;username&gt;\n</code></pre> Replace <code>&lt;username&gt;</code> with your desired username. You will be prompted to enter a password.</p> <p>Example: <pre><code>mosquitto_passwd -c /etc/mosquitto/password user1\n</code></pre> <code>-c</code> creates a new password file. If you want to add more users later, use: <pre><code>mosquitto_passwd /etc/mosquitto/password &lt;new-username&gt;\n</code></pre></p> </li> <li> <p>Windows:</p> <p>Use the <code>mosquitto_passwd</code> utility to generate the password file: <pre><code>mosquitto_passwd -c C:\\Program Files\\mosquitto\\password &lt;username&gt;\n</code></pre> Replace <code>&lt;username&gt;</code> with your desired username. You will be prompted to enter a password.</p> <p>Warning</p> <p>To edit a file inside <code>C:\\Program Files\\mosquitto\\</code>, you'll need administrator rights. If you run the previous command, you'll write in the <code>C:\\Program Files\\mosquitto\\password</code> file. To do so, you can open the terminal as administrator.</p> <p></p> <p>Example: <pre><code>mosquitto_passwd -c C:\\Program Files\\mosquitto\\password user1\n</code></pre></p> <p></p> <p><code>-c</code> creates a new password file. If you want to add more users later, use:</p> <pre><code>mosquitto_passwd C:\\Program Files\\mosquitto\\password &lt;new-username&gt;\n</code></pre> </li> </ul> </li> <li> <p>Update the configuration file to use the password file:</p> <ul> <li> <p>Linux:</p> <p>Open <code>mosquitto.conf</code> and add or edit the following lines: <pre><code>allow_anonymous false\npassword_file /etc/mosquitto/passwords\n</code></pre></p> </li> <li> <p>Windows:</p> <p>Open <code>mosquitto.conf</code> and add or edit the following lines: <pre><code>allow_anonymous false\npassword_file C:\\Program Files\\mosquitto\\password\n</code></pre></p> </li> </ul> <p></p> </li> <li> <p>Restart the Mosquitto service:</p> <ul> <li>Linux:     <pre><code>sudo systemctl restart mosquitto\n</code></pre></li> <li>Windows: Restart as mentioned earlier.</li> </ul> </li> </ol> <p>Warning</p> <p>If you receive this error when you try to restart the Mosquitto service</p> <p></p> <p>you must change the permissions of the <code>password</code> file. </p> <ul> <li>Find the password file in <code>C:/Program Files/mosquitto</code>, right click &gt; properties and go to the security tab. </li> </ul> <p>Check if the SYSTEM group has permissions to modify the file. If it does not, you will have to give them as follows. </p> <ul> <li>Click on Edit and then on Add.  </li> </ul> <p></p> <ul> <li>Add the group SYSTEM and give it permissions to modify the file and click on apply (this is very important).</li> </ul> <p></p> <p>The result should look like this</p> <p></p>"},{"location":"mqtt/getting_started/part3_external_connections/#3-firewall-rules","title":"3. Firewall Rules","text":"<p>If Mosquitto is running on a remote machine, make sure the firewall allows connections to the MQTT port (1883 by default).</p> <ul> <li> <p>Linux (using UFW):     <pre><code>sudo ufw allow 1883\n</code></pre></p> </li> <li> <p>Windows: Open \"Windows Defender Firewall,\" and allow inbound traffic for port 1883.</p> </li> </ul> <p>Note</p> <p>This was already done in Part 1</p>"},{"location":"mqtt/getting_started/part3_external_connections/#4-testing-external-access","title":"4. Testing External Access","text":""},{"location":"mqtt/getting_started/part3_external_connections/#testing-from-a-generic-mqtt-client-mqtt-explorer","title":"Testing from a generic MQTT Client (MQTT Explorer)","text":"<p>You can test the connection from a generic MQTT Client like MQTT Explorer.</p> <ol> <li>Install MQTT Explorer.</li> <li> <p>Check the IP of the broker. Open a terminal and run</p> <ul> <li> <p>Linux <pre><code>ipconfig\n</code></pre></p> </li> <li> <p>Windows:      <pre><code>ifconfig\n</code></pre></p> </li> </ul> <p></p> <p>You need to annotate the IPv4 address. In my case: <code>192.168.0.12</code></p> </li> <li> <p>Launch MQTT Explorer and fill the IP, user and password</p> <p></p> </li> <li> <p>Publish in a topic from MQTT Explorer</p> <p></p> </li> </ol>"},{"location":"mqtt/getting_started/part3_external_connections/#testing-from-another-pc","title":"Testing from another PC","text":"<p>You can test the connection from another PC in the network that has installed mosquitto too:</p> <ol> <li> <p>Subscribe from the broker device:     <pre><code>mosquitto_sub -h &lt;server-ip&gt; -t test -u &lt;username&gt; -P &lt;password&gt;\n</code></pre></p> </li> <li> <p>Publish from an external device:     <pre><code>mosquitto_pub -h &lt;server-ip&gt; -t test -m \"This is a message from an external device: Hello, MQTT!\" -u &lt;username&gt; -P &lt;password&gt;\n</code></pre></p> </li> </ol> <p>Replace <code>&lt;server-ip&gt;</code> with the server's IP address, <code>&lt;username&gt;</code> with your chosen username, and <code>&lt;password&gt;</code> with the associated password.</p>"},{"location":"mqtt/getting_started/part3_external_connections/#testing-from-an-smartphone","title":"Testing from an Smartphone","text":"<p>You can test the connection from a Smartphone in the network that has installed mosquitto too:</p> <ol> <li>Install MyMQTT</li> <li> <p>Connect to the broker</p> <p></p> </li> <li> <p>Subscribe to topic <code>/test</code> and go to the Dashboard</p> <p></p> </li> <li> <p>Publish a message in <code>/test</code>from another device in the newtork (e.g., from a terminal in your PC)      <pre><code>mosquitto_pub -h &lt;server-ip&gt; -t test -m \"This is a message from an external device: Hello, MQTT!\" -u &lt;username&gt; -P &lt;password&gt;\n</code></pre></p> </li> <li> <p>The message should be visible in the MyMQTT Dashboard</p> <p></p> </li> </ol>"},{"location":"mqtt/getting_started/part3_external_connections/#summary-of-key-configuration-file-changes","title":"Summary of Key Configuration File Changes","text":"<pre><code>listener 1883\nallow_anonymous false\npassword_file /etc/mosquitto/passwords.txt\n</code></pre> <p>After completing these steps, Mosquitto will accept external connections (i.e., from external devices, but in the local network) on port 1883, and only users with valid credentials can publish or subscribe.</p> <p>CONGRATULATIONS!</p> <p>You have created your first MQTT local network and are able to communicate devices in the network using this protocol and to monitor the traffic of the network</p>"},{"location":"mqtt/lab1/","title":"Lab Session: MQTT with M5Core2","text":"<p>TBD</p>"}]}